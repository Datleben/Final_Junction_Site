@model List<Final_Junction_Site.Models.SiteListModel>

@{
    ViewData["Title"] = "Site Listings";
}

<!-- Bootstrap CSS for styling and responsive design -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.5.0/dist/css/bootstrap.min.css" rel="stylesheet">

<div class="container mt-5">
    <h2 class="mb-3">Explore Site Listings</h2>

    <!-- Search input field -->
    <input class="form-control mb-4" id="searchInput" type="text" placeholder="Search sites by name or location...">

    <!-- Table to display site listings with hover effect -->
    <table class="table table-hover">
        <thead class="table-light">
            <!-- Table headers with click events for sorting -->
            <tr>
                <th onclick="sortTable(0)">Site ID &#9656;</th>
                <th onclick="sortTable(1)">Name &#9656;</th>
                <th onclick="sortTable(2)">Location &#9656;</th>
                <th onclick="sortTable(3)">Added Date &#9656;</th>
            </tr>
        </thead>
        <tbody id="siteTableBody">
            <!-- Loop through each site and create a row -->
            @foreach (var site in Model)
            {
                <tr class="table-row">
                    <td>@site.SiteId</td>
                    <td>@site.Name</td>
                    <td>@site.Location</td>
                    <td>@site.AddedDate.ToString("yyyy-MM-dd")</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Bootstrap Bundle with Popper for responsive design and interactive components -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.5.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
    // JavaScript for enabling live search functionality
    document.getElementById('searchInput').addEventListener('keyup', function (event) {
        var searchValue = event.target.value.toLowerCase();
        var rows = document.querySelectorAll('#siteTableBody tr');

        // Loop through table rows to hide those that do not match the search query
        rows.forEach(row => {
            const visible = row.cells[1].textContent.toLowerCase().includes(searchValue) ||
                row.cells[2].textContent.toLowerCase().includes(searchValue);
            row.style.display = visible ? '' : 'none';
        });
    });

    // Function to sort table based on column clicked
    function sortTable(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("siteTableBody");
        switching = true;
        dir = "asc"; // Initial direction is ascending

        // Loop to continue until no more switching is needed
        while (switching) {
            switching = false;
            rows = table.getElementsByTagName("TR");

            // Compare each row with the next
            for (i = 0; i < rows.length - 1; i++) {
                shouldSwitch = false;
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];

                // Check if rows should switch place
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                switchcount++;
            } else {
                // If no switching has been done and direction is asc, switch to desc
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }
</script>

<style>
    /* Styling for table headers to indicate they are clickable */
    th {
        cursor: pointer;
    }
    /* Hover styling for table rows */
    .table-hover tbody tr:hover {
        background-color: #f5f5f5;
    }
</style>
